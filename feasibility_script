##### packages to import 
import geopandas as gpd
import pyogrio
import pandas as pd
import ast

%run bgi_catalog.ipynb

##### for reading text per word instead of as string 
def safe_literal_eval(val):
    if isinstance(val, str):
        try:
            return ast.literal_eval(val)
        except Exception:
            return val
    return val

def load_bgi_database(filename):
    local_vars = {}
    with open(filename) as f:
        exec(f.read(), {}, local_vars)
    return local_vars

# loading in the shapefile 
# ENTER YOUR SHAPEFILE HERE
GPKG_FILE='example_urban_landcover.gpkg'
layers = pyogrio.list_layers(GPKG_FILE)
LAYER_NAME = 'depijp'
gdf = gpd.read_file(GPKG_FILE, layer=LAYER_NAME, engine='pyogrio')

print(layers)
print(gdf.head())

# map DATA class to the layers used by BGIs catalog
landcover_dictionary = { 
    'flat roof': 'flat roof',
    'grass': 'ground',
    'other': 'none',
    'pavement': 'pavement', 
    'point roof': 'none',
    'road': 'pavement',
    'tree': 'ground',
    'water': 'none',
}

gdf['basic_lulc'] = gdf['Class'].str.lower().map(landcover_dictionary)

def feasibility(land_data_file):
    suitable_bgis = [[] for _ in range(len(land_data_file))]

    # Normalize landcover
    cell_lulc = land_data_file['Class'].astype(str).str.strip().str.lower()
    cell_area = pd.to_numeric(land_data_file['area m2'], errors='coerce').fillna(0)

    for bgi_name, bgi in bgi_catalog.items():
        # Normalize BGI LULC
        bgi_lulc = [x.lower() for x in bgi['lulc']]

        mask_lulc = cell_lulc.isin(bgi_lulc)
        min_bgi_area = bgi['area_m2'].get('min', 0)
        mask_area = cell_area >= min_bgi_area

        mask = mask_lulc & mask_area

        for idx in mask[mask].index:
            suitable_bgis[idx].append(bgi_name)

    land_data_file['suitable_bgis'] = suitable_bgis
    return land_data_file

# run function
feasibility_gdf = feasibility(gdf)
feasibility_gdf


# add binary matrix
bgi_binary = pd.DataFrame(0, index=feasibility_gdf.index, columns = list(bgi_catalog.keys()))
for idx, bgis in enumerate(feasibility_gdf['suitable_bgis']):
    bgi_binary.loc[idx, bgis] = 1

feasibility_gdf = pd.concat([feasibility_gdf, bgi_binary], axis=1)

# save file
feasibility_gdf.to_file("feasibility_results.gpkg", layer="feasibility", driver="GPKG")
